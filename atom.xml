<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kevin&#39; blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dupengchuan.github.io/"/>
  <updated>2016-05-28T07:44:47.802Z</updated>
  <id>http://dupengchuan.github.io/</id>
  
  <author>
    <name>Kevin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>安装Scrapy</title>
    <link href="http://dupengchuan.github.io/2016/05/27/scrapy-setup/"/>
    <id>http://dupengchuan.github.io/2016/05/27/scrapy-setup/</id>
    <published>2016-05-27T13:45:36.000Z</published>
    <updated>2016-05-28T07:44:47.802Z</updated>
    
    <content type="html">&lt;h1 id=&quot;安装python环境&quot;&gt;&lt;a href=&quot;#安装python环境&quot; class=&quot;headerlink&quot; title=&quot;安装python环境&quot;&gt;&lt;/a&gt;安装python环境&lt;/h1&gt;&lt;p&gt;下载&lt;a href=&quot;https://www.python.org/ftp/python/2.7.11/Python-2.7.11.tgz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;python 2.7.11&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tar -zxvf Python-2.7.11.tgz

cd Python-2.7.11

./configure --prefix=/usr/local

make &amp;amp;&amp;amp; make all &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;安装setuptools&quot;&gt;&lt;a href=&quot;#安装setuptools&quot; class=&quot;headerlink&quot; title=&quot;安装setuptools&quot;&gt;&lt;/a&gt;安装setuptools&lt;/h1&gt;&lt;p&gt;使用&lt;a href=&quot;bootstrap.pypa.io&quot;&gt;ez_setup.py&lt;/a&gt;安装：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget --no-check-certificate https://bootstrap.pypa.io/ez_setup.py
python ez_setup.py install
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;安装pip&quot;&gt;&lt;a href=&quot;#安装pip&quot; class=&quot;headerlink&quot; title=&quot;安装pip&quot;&gt;&lt;/a&gt;安装pip&lt;/h1&gt;&lt;p&gt;使用&lt;a href=&quot;bootstrap.pypa.io&quot;&gt;get-pip.py&lt;/a&gt;安装：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget --no-check-certificate https://bootstrap.pypa.io/get-pip.py

python get-pip.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用该方法会自动安装 setuptools 和 wheel&lt;/p&gt;
&lt;p&gt;使用安装包： &lt;a href=&quot;https://pypi.python.org/pypi/pip/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pip-8.1.2&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tar -zxvf pip-8.1.2.tar.gz

cd pip-8.1.2

python setup.py install
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用此方法安装必须先安装好setuptools&lt;/p&gt;
&lt;h1 id=&quot;安装Scrapy&quot;&gt;&lt;a href=&quot;#安装Scrapy&quot; class=&quot;headerlink&quot; title=&quot;安装Scrapy&quot;&gt;&lt;/a&gt;安装Scrapy&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;pip install Scrapy
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;遇到的问题： Failed building wheel for cryptography&lt;/p&gt;
&lt;p&gt;cryptography安装不成功，这个包是有关https使用的，系统中要有支持的库，看到了这里&lt;a href=&quot;http://stackoverflow.com/questions/22073516/failed-to-install-python-cryptography-package-with-pip-and-setup-py&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stackoverflow&lt;/a&gt;,里面通过安装以下包解决了问题&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo yum install gcc libffi-devel python-devel openssl-devel
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用rpm命令，检查发现缺少了libffi-devel&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yum install libffi-devel
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安装之后顺利安装完成Scrapy&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cat &amp;gt; myspider.py &amp;lt;&amp;lt;EOF&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  from scrapy import Spider, Item, Field&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  class Post(Item):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    title = Field()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  class BlogSpider(Spider):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name = &#39;kevin&#39;blog&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    start_urls = [&#39;dupengchuan.me&#39;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def parse(self, response):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      return [Post(title=e.extract()) for e in response.css(&quot;h2 a::text&quot;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;EOF&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;运行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;scrap runspider myspider
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行结果正常这里不再显示&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;OS： CentOS 6.5&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装python环境&quot;&gt;&lt;a href=&quot;#安装python环境&quot; class=&quot;headerlink&quot; title=&quot;安装python环境&quot;&gt;&lt;/a&gt;安装python环境&lt;/h1&gt;&lt;p&gt;下载&lt;a href=&quot;https://www.python.org/ftp/python/2.7.11/Python-2.7.11.tgz&quot;&gt;python 2.7.11&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tar -zxvf Python-2.7.11.tgz

cd Python-2.7.11

./configure --prefix=/usr/local

make &amp;amp;&amp;amp; make all &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://dupengchuan.github.io/tags/Python/"/>
    
      <category term="Crawler" scheme="http://dupengchuan.github.io/tags/Crawler/"/>
    
  </entry>
  
  <entry>
    <title>FTP服务器安装以及配置</title>
    <link href="http://dupengchuan.github.io/2016/05/27/vsftpd/"/>
    <id>http://dupengchuan.github.io/2016/05/27/vsftpd/</id>
    <published>2016-05-27T10:41:18.000Z</published>
    <updated>2016-05-28T03:47:22.718Z</updated>
    
    <content type="html">&lt;p&gt;今天安装了一下FTP服务器，记录一下安装过程，以及遇到的问题&lt;/p&gt;
&lt;p&gt;OS： CentOS6.5&lt;/p&gt;
&lt;p&gt;vsftpd Version： 2.2.2&lt;/p&gt;
&lt;h1 id=&quot;安装vsftpd&quot;&gt;&lt;a href=&quot;#安装vsftpd&quot; class=&quot;headerlink&quot; title=&quot;安装vsftpd&quot;&gt;&lt;/a&gt;安装vsftpd&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;yum install vsftpd
&lt;/code&gt;&lt;/pre&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h2&gt;&lt;p&gt;vaftpd的配置文件：/etc/vsftpd/vsftpd.conf&lt;/p&gt;
&lt;p&gt;关掉匿名登录开启本地用户登录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;anonimous_enable=NO

local_enable=YES
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;设置开机启动&quot;&gt;&lt;a href=&quot;#设置开机启动&quot; class=&quot;headerlink&quot; title=&quot;设置开机启动&quot;&gt;&lt;/a&gt;设置开机启动&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;使用可交互的界面设置（空格选中）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ntsysv
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;命令设置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chkconfig vsftpd on   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;启动vsftpd&quot;&gt;&lt;a href=&quot;#启动vsftpd&quot; class=&quot;headerlink&quot; title=&quot;启动vsftpd&quot;&gt;&lt;/a&gt;启动vsftpd&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;service vsftpd start
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;发现不能访问，可以ping通，说明不是网络的问题，telnet ip 21。telnet不上,应该是防火墙的原因&lt;/p&gt;
&lt;h1 id=&quot;配置防火墙&quot;&gt;&lt;a href=&quot;#配置防火墙&quot; class=&quot;headerlink&quot; title=&quot;配置防火墙&quot;&gt;&lt;/a&gt;配置防火墙&lt;/h1&gt;&lt;p&gt;allow all ftp incoming connections&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;iptables -A INPUT -p tcp --dport 21 -m state --state ESTABLISHED -j ACCEPT

iptables -A OUTPUT -p tcp --sport 21 -m state --state NEW,ESTABLISHED -j ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Enable active ftp transfers&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;iptables -A INPUT -p tcp --dport 20 -m state --state ESTABLISHED,RELATED -j ACCEPT

iptables -A OUTPUT -p tcp --sport 20 -m state --state ESTABLISHED -j ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Enable passive ftp transfers&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;iptables -A INPUT -p tcp --sport 1024:65535 --dport 1024:65535 -m state --state ESTABLISHED -j ACCEPT

iptables -A OUTPUT -p tcp --sport 1024:65535 --dport 1024:65535 -m state --state ESTABLISHED,RELATED -j ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;主动模式中，使用端口20发送数据，所以是对20端口配置&lt;/p&gt;
&lt;p&gt;被动模式的端口号是动态申请的，所以指定的是一个范围&lt;/p&gt;
&lt;p&gt;防火墙配置好之后记得保存规则&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;service iptables save
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;重启服务，发现还是不能登录，报错如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;500 OOPS: cannot change directory:/home/*******

500 OOPS: child died
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一个权限的问题，google一下，发现是SELinux做了约束，需要修改相应配置&lt;/p&gt;
&lt;h1 id=&quot;修改SELinux&quot;&gt;&lt;a href=&quot;#修改SELinux&quot; class=&quot;headerlink&quot; title=&quot;修改SELinux&quot;&gt;&lt;/a&gt;修改SELinux&lt;/h1&gt;&lt;p&gt;方法一、关闭SELinux&lt;/p&gt;
&lt;p&gt;SELinux的启动配置文件是： /etc/selinux/config&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELINUX=disabled
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;方法二、开启某些功能&lt;/p&gt;
&lt;p&gt;网上有的人这么做&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;setsebool -P ftpd_disable_trans on
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是我这里找不到 ftpd_disable_trans，可能是系统版本的问题，经过尝试，终于用下面命令搞定&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;setsebool -P ftp_home_dir on
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;一些关于SELinux的命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;setsebool xxx on/off　　＃设置状态

getsetools -a　　＃结合grep可以看到有关ftp的约束

sestatus　　＃查看selinux是否开启
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;今天安装了一下FTP服务器，记录一下安装过程，以及遇到的问题&lt;/p&gt;
&lt;p&gt;OS： CentOS6.5&lt;/p&gt;
&lt;p&gt;vsftpd Version： 2.2.2&lt;/p&gt;
&lt;h1 id=&quot;安装vsftpd&quot;&gt;&lt;a href=&quot;#安装vsftpd&quot; class=&quot;headerlink&quot; title=&quot;安装vsftpd&quot;&gt;&lt;/a&gt;安装vsftpd&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;yum install vsftpd
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://dupengchuan.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>你的操作系统是如何运行的？</title>
    <link href="http://dupengchuan.github.io/2016/05/24/when-dos-your-os-run/"/>
    <id>http://dupengchuan.github.io/2016/05/24/when-dos-your-os-run/</id>
    <published>2016-05-24T05:37:08.000Z</published>
    <updated>2016-05-26T15:19:40.795Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;这篇博文来自于&lt;a href=&quot;http://duartes.org/gustavo/blog/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gustavo Duarte&lt;/a&gt;的科普博客，本人出于兴趣翻译过来，原文：&lt;a href=&quot;http://duartes.org/gustavo/blog/post/when-does-your-os-run/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;When Does Your OS Run?&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里有一个问题，就是在你阅读到我这篇博文中的这句话的时候，你的操作系统是否正在运行？还是只有浏览器在运行？还是它们都处于空闲状态，正在等待你分配任务？&lt;/p&gt;
&lt;p&gt;这些问题虽然简单但却深入到整个软件运行过程。为了准确地回答这些问题，我们要在大脑中对操作系统行为有一个良好的运行状态模型，即操作系统依次通知进程执行，安全方面以及故障的决策。希望通过这一些列博文，我们能够在脑海里建立起这种模型。本文主要使用Linux作为主要的操作系统，OS X和Windows也会偶尔出现。某些地方我会附上源码链接以方便那些想要深入研究的人。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有一个基本公理：即在任何时刻，在CPU上有且仅有一个任务在运行。这个任务通常是一个进程，像浏览器，音乐播放器等等，但是也有可能是操作系统线程，但它也是一个任务。同一时刻CPU上的任务不可能是两个或者多个，也不会是0个。&lt;/p&gt;
&lt;p&gt;这个听起来很抽象，举个例子，如果你的音乐播放器一直占用着CPU,并且不让其他任务占有，这种情况，你不能打开一个工具（Windows是任务管理器，Linux使用shell命令）去杀死它，此时移动或者点击鼠标都是无效的，因为操作系统不会让它们执行，那么你可能被一直卡在”The fox”（一首歌的名字）。&lt;/p&gt;
&lt;p&gt;以上便是中断的由来。就像神经系统打断大脑的正常运行，带来外界的刺激，一声巨响或者拍一下肩膀。主板上的&lt;a href=&quot;http://duartes.org/gustavo/blog/post/motherboard-chipsets-memory-map&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;芯片&lt;/a&gt;为了传达外部事件（按下键盘，网络数据包到达，硬盘读取完毕等等）也会中断CPU。硬件外设、中断控制器以及CPU一起完成中断过程。&lt;/p&gt;
&lt;p&gt;控制任务执行时间是通过中断实现的。在&lt;a href=&quot;http://duartes.org/gustavo/blog/post/kernel-boot-process&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;系统启动过程&lt;/a&gt;中，内核启动一个定时器周期性的发出中断请求，比如10ms一次。当一个中断发生后，CPU执行中断处理程序，更新系统的状态，观察一些事件，比如是否当前进程执行时间超过了时间片？TCP连接是否超时？中断给了内核一个机会思考这些问题并采取合适方法去解决。这就像你设置了定时报警器，特定的时间点回去提醒你去做什么事情：我现在应该做什么？是否有更重要的事情做？&lt;/p&gt;
&lt;p&gt;内核通过中断周期性地占有CPU,中断使操作系统像时钟一样滴答滴答地运行。但中断不止这些，中断也用来处理一些软件事件，比如整数溢出和缺页错误，这些中断没有外部硬件的参与。中断是进入系统内核最重要和最频繁的入口，因此很多电子工程师对中断作为操作系统运行的机制表示担心。&lt;/p&gt;
&lt;p&gt;不说废话了，让我们来一些实际行动。下面是一个基于英特尔酷睿i5的网卡中断过程。现在该图有链接，点击获得更多信息。例如从设备到它的linux驱动。(ps：原文里面的图片有链接)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img1.ph.126.net/mZPBFG0B6_SQ9BV1_veMxQ==/61924494977343331.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们来看看这张图。首先，由于有很多中断源，如果硬件只是告诉CPU:“嗨，有事情发生了！”，然后离开，那么CPU不知道发生了什么，显然这不会有多大的实际意义。因此每个设备都被安排了一个中断请求路线(LRQ)。所有的中断请求都会到达中断请求控制器，中断请求控制器根据LRQ依次将中断请求映射为中断向量（0-255表示）。当中断到达CPU,CPU面对的是一个友好的明确的中断向量。而不是各种各样的外部硬件。&lt;/p&gt;
&lt;p&gt;反过来，CPU有一个指向255个函数数组的指针，这些函数被内核支持，每一个函数对应一个特定的中断向量。在后面我们将会看到这个数组——中断描述符表（IDT）。&lt;/p&gt;
&lt;p&gt;每当一个中断到达，CPU使用它的中断向量作为索引进入IDT然后运行相应的中断处理函数。这是一个特殊的函数调用，因为发生在当前运行任务的上下文，操作系统以最小的开销去响应外部事件。因此web服务器如果在向你发送数据的时候调用一个函数，这是不是很酷或者很可怕？下面我们展示一个场景：CPU正在运行一个Vim命令时，来了一个中断。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img0.ph.126.net/u-7hwJNC-174Sx4O1zkXJw==/1156299204428848479.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;注意中断的到来如何导致内核模式和&lt;a href=&quot;http://duartes.org/gustavo/blog/post/cpu-rings-privilege-and-protection&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ring 0&lt;/a&gt;的切换，但是不会改变活动任务。这就好像Vim变魔术一般调用一个函数直接进入内核。但是Vim依然在这里，它的&lt;a href=&quot;http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;地址空间&lt;/a&gt;没有变，正在等待函数返回。&lt;/p&gt;
&lt;p&gt;终于要写完了，兴奋的时刻！，哈哈，我知道我还没有回答那个开放问题，并且还引入了新问题。但是当你读到我这句话的时候，如果你仍旧怀疑操作系统到底是什么状态。相信你可以找到答案,因为我们之前已经讲解了了操作系统的动态运行模型。这个浏览器的问题也变得清晰了。如果你还有问题，尤其是这个博文发表之后，我会尽快在博文里面或者评论里面回答你的问题。之后的会在RSS和Twitter上做解答。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这篇博文来自于&lt;a href=&quot;http://duartes.org/gustavo/blog/&quot;&gt;Gustavo Duarte&lt;/a&gt;的科普博客，本人出于兴趣翻译过来，原文：&lt;a href=&quot;http://duartes.org/gustavo/blog/post/when-does-your-os-run/&quot;&gt;When Does Your OS Run?&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里有一个问题，就是在你阅读到我这篇博文中的这句话的时候，你的操作系统是否正在运行？还是只有浏览器在运行？还是它们都处于空闲状态，正在等待你分配任务？&lt;/p&gt;
&lt;p&gt;这些问题虽然简单但却深入到整个软件运行过程。为了准确地回答这些问题，我们要在大脑中对操作系统行为有一个良好的运行状态模型，即操作系统依次通知进程执行，安全方面以及故障的决策。希望通过这一些列博文，我们能够在脑海里建立起这种模型。本文主要使用Linux作为主要的操作系统，OS X和Windows也会偶尔出现。某些地方我会附上源码链接以方便那些想要深入研究的人。&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://dupengchuan.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://dupengchuan.github.io/2016/05/22/hello-world/"/>
    <id>http://dupengchuan.github.io/2016/05/22/hello-world/</id>
    <published>2016-05-22T05:18:13.523Z</published>
    <updated>2016-05-26T15:21:23.015Z</updated>
    
    <content type="html">&lt;p&gt;很早就想有一个自己的博客，今天终于初步搭建好了。&lt;/p&gt;
&lt;p&gt;使用的是github pages托管网页,一个静态博客。&lt;/p&gt;
&lt;p&gt;Hexo静态网页生成工具,有关Hexo的使用可以从官网获得帮助：&lt;a href=&quot;http://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://hexo.io&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;主题使用的是even，连接：&lt;a href=&quot;https://github.com/ahonn/hexo-theme-even&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/ahonn/hexo-theme-even&lt;/a&gt;，在此谢谢ahonn。&lt;/p&gt;
&lt;p&gt;争取以后养成写博客的习惯&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://n1.itc.cn/img8/wb/smccloud/recom/2015/09/06/144154649059751427.JPEG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;很早就想有一个自己的博客，今天终于初步搭建好了。&lt;/p&gt;
&lt;p&gt;使用的是github pages托管网页,一个静态博客。&lt;/p&gt;
&lt;p&gt;Hexo静态网页生成工具,有关Hexo的使用可以从官网获得帮助：&lt;a href=&quot;http://hexo.io&quot;&gt;http://hexo.io&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="life" scheme="http://dupengchuan.github.io/tags/life/"/>
    
  </entry>
  
</feed>
